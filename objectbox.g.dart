// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/location.dart';
import 'models/msp.dart';
import 'models/product.dart';
import 'models/product_inventory.dart';
import 'models/task.dart';
import 'models/transaction.dart';
import 'models/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6203574964986346214),
      name: 'Task',
      lastPropertyId: const obx_int.IdUid(4, 1256884700509201657),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 983788588060172940),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1462778270467444084),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5681929398015411005),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1256884700509201657),
            name: 'completed',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7804767612861427598),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(10, 41822476722790427),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7324505757433743751),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4013048873846285638),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5351508773239318695),
            name: 'password',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4884365913611055581),
            name: 'userType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 41822476722790427),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 3094245831898735718),
      name: 'Location',
      lastPropertyId: const obx_int.IdUid(11, 3566681764700289165),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2216057211385636799),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7761140985452315153),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5423494327778376791),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4997140736630017738),
            name: 'latitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4629217888760352295),
            name: 'longitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7450571342976524880),
            name: 'area',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3835409327752521828),
            name: 'areaUnit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5545603750358758836),
            name: 'productId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 5720394689668237049),
            relationTarget: 'Product'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8410501688122469696),
            name: 'farmerId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 8720277562539817613),
            relationTarget: 'User'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5718431684903668953),
            name: 'soilType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3566681764700289165),
            name: 'irrigationSource',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 6984787870518800398),
      name: 'Product',
      lastPropertyId: const obx_int.IdUid(7, 3835318904732984867),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2630233465698813483),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2376018006399786912),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4213320682570312023),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 388437071970421256),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8116362379528988616),
            name: 'unit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8459854879320119925),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3835318904732984867),
            name: 'searchName',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(3, 5327518951975811820))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 8949135053545029084),
      name: 'ProductInventory',
      lastPropertyId: const obx_int.IdUid(7, 7622747632172589581),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2943177376861745888),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1036621093073136347),
            name: 'quantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2548115026585242183),
            name: 'unit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6331056426678015913),
            name: 'lastUpdated',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4521599785982244722),
            name: 'productId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 5246482274717876947),
            relationTarget: 'Product'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7722129257742454078),
            name: 'ownerId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 3523053630897722710),
            relationTarget: 'User'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7622747632172589581),
            name: 'updateDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 8330730195187299600),
      name: 'Transaction',
      lastPropertyId: const obx_int.IdUid(10, 4782722850852798033),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4808068654467525642),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 347892589680607268),
            name: 'timestamp',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8258650355422369148),
            name: 'transactionType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 339624576798560719),
            name: 'quantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5235630908232914180),
            name: 'unit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3567306614737745088),
            name: 'totalAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4376576166020672526),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8560117620301067180),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 1864992245298789179),
            relationTarget: 'User'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3331497876529871334),
            name: 'productId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 6520073067989544735),
            relationTarget: 'Product'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4782722850852798033),
            name: 'date',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 5986301312473222549),
      name: 'MSP',
      lastPropertyId: const obx_int.IdUid(6, 4377844575307259221),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 69721454045361692),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3416387799428872640),
            name: 'cropName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2603645831151789602),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3503685927518626745),
            name: 'unit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2767569888473830841),
            name: 'lastUpdated',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4377844575307259221),
            name: 'updateDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(7, 5986301312473222549),
      lastIndexId: const obx_int.IdUid(9, 6259564995886817808),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [6259564995886817808, 3168229649781365458],
      retiredPropertyUids: const [
        431765584011425184,
        6541402689796740313,
        275380636407023768,
        3828884080114430896,
        7323750433407031775
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Task: obx_int.EntityDefinition<Task>(
        model: _entities[0],
        toOneRelations: (Task object) => [],
        toManyRelations: (Task object) => {},
        getId: (Task object) => object.id,
        setId: (Task object, int id) {
          object.id = id;
        },
        objectToFB: (Task object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addBool(3, object.completed);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final completedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final object = Task(
              title: titleParam,
              description: descriptionParam,
              completed: completedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    User: obx_int.EntityDefinition<User>(
        model: _entities[1],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          final userTypeOffset = fbb.writeString(object.userType);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(4, userTypeOffset);
          fbb.addOffset(9, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final userTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = User(
              name: nameParam,
              email: emailParam,
              password: passwordParam,
              userType: userTypeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Location: obx_int.EntityDefinition<Location>(
        model: _entities[2],
        toOneRelations: (Location object) => [object.product, object.farmer],
        toManyRelations: (Location object) => {},
        getId: (Location object) => object.id,
        setId: (Location object, int id) {
          object.id = id;
        },
        objectToFB: (Location object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final addressOffset = fbb.writeString(object.address);
          final areaUnitOffset = fbb.writeString(object.areaUnit);
          final soilTypeOffset = object.soilType == null
              ? null
              : fbb.writeString(object.soilType!);
          final irrigationSourceOffset = object.irrigationSource == null
              ? null
              : fbb.writeString(object.irrigationSource!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, addressOffset);
          fbb.addFloat64(3, object.latitude);
          fbb.addFloat64(4, object.longitude);
          fbb.addFloat64(5, object.area);
          fbb.addOffset(6, areaUnitOffset);
          fbb.addInt64(7, object.product.targetId);
          fbb.addInt64(8, object.farmer.targetId);
          fbb.addOffset(9, soilTypeOffset);
          fbb.addOffset(10, irrigationSourceOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final latitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final longitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final areaParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final areaUnitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final soilTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final irrigationSourceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final object = Location(
              id: idParam,
              name: nameParam,
              address: addressParam,
              latitude: latitudeParam,
              longitude: longitudeParam,
              area: areaParam,
              areaUnit: areaUnitParam,
              soilType: soilTypeParam,
              irrigationSource: irrigationSourceParam);
          object.product.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.product.attach(store);
          object.farmer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.farmer.attach(store);
          return object;
        }),
    Product: obx_int.EntityDefinition<Product>(
        model: _entities[3],
        toOneRelations: (Product object) => [],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.id,
        setId: (Product object, int id) {
          object.id = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final unitOffset = fbb.writeString(object.unit);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final searchNameOffset = fbb.writeString(object.searchName);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addFloat64(3, object.price);
          fbb.addOffset(4, unitOffset);
          fbb.addOffset(5, imageUrlOffset);
          fbb.addOffset(6, searchNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final unitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = Product(
              id: idParam,
              name: nameParam,
              description: descriptionParam,
              price: priceParam,
              unit: unitParam,
              imageUrl: imageUrlParam)
            ..searchName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '');

          return object;
        }),
    ProductInventory: obx_int.EntityDefinition<ProductInventory>(
        model: _entities[4],
        toOneRelations: (ProductInventory object) =>
            [object.product, object.owner],
        toManyRelations: (ProductInventory object) => {},
        getId: (ProductInventory object) => object.id,
        setId: (ProductInventory object, int id) {
          object.id = id;
        },
        objectToFB: (ProductInventory object, fb.Builder fbb) {
          final unitOffset = fbb.writeString(object.unit);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.quantity);
          fbb.addOffset(2, unitOffset);
          fbb.addInt64(3, object.lastUpdated);
          fbb.addInt64(4, object.product.targetId);
          fbb.addInt64(5, object.owner.targetId);
          fbb.addInt64(6, object.updateDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final quantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final unitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final lastUpdatedParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = ProductInventory(
              id: idParam,
              quantity: quantityParam,
              unit: unitParam,
              lastUpdated: lastUpdatedParam)
            ..updateDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          object.product.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.product.attach(store);
          object.owner.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.owner.attach(store);
          return object;
        }),
    Transaction: obx_int.EntityDefinition<Transaction>(
        model: _entities[5],
        toOneRelations: (Transaction object) => [object.user, object.product],
        toManyRelations: (Transaction object) => {},
        getId: (Transaction object) => object.id,
        setId: (Transaction object, int id) {
          object.id = id;
        },
        objectToFB: (Transaction object, fb.Builder fbb) {
          final transactionTypeOffset = fbb.writeString(object.transactionType);
          final unitOffset = fbb.writeString(object.unit);
          final statusOffset = fbb.writeString(object.status);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.timestamp);
          fbb.addOffset(2, transactionTypeOffset);
          fbb.addFloat64(3, object.quantity);
          fbb.addOffset(4, unitOffset);
          fbb.addFloat64(5, object.totalAmount);
          fbb.addOffset(6, statusOffset);
          fbb.addInt64(7, object.user.targetId);
          fbb.addInt64(8, object.product.targetId);
          fbb.addInt64(9, object.date.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final timestampParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final transactionTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final quantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final unitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final totalAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = Transaction(
              id: idParam,
              timestamp: timestampParam,
              transactionType: transactionTypeParam,
              quantity: quantityParam,
              unit: unitParam,
              totalAmount: totalAmountParam,
              status: statusParam)
            ..date = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.user.attach(store);
          object.product.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.product.attach(store);
          return object;
        }),
    MSP: obx_int.EntityDefinition<MSP>(
        model: _entities[6],
        toOneRelations: (MSP object) => [],
        toManyRelations: (MSP object) => {},
        getId: (MSP object) => object.id,
        setId: (MSP object, int id) {
          object.id = id;
        },
        objectToFB: (MSP object, fb.Builder fbb) {
          final cropNameOffset = fbb.writeString(object.cropName);
          final unitOffset = fbb.writeString(object.unit);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, cropNameOffset);
          fbb.addFloat64(2, object.price);
          fbb.addOffset(3, unitOffset);
          fbb.addInt64(4, object.lastUpdated);
          fbb.addInt64(5, object.updateDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final cropNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final unitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final lastUpdatedParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = MSP(
              id: idParam,
              cropName: cropNameParam,
              price: priceParam,
              unit: unitParam,
              lastUpdated: lastUpdatedParam)
            ..updateDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Task] entity fields to define ObjectBox queries.
class Task_ {
  /// See [Task.id].
  static final id = obx.QueryIntegerProperty<Task>(_entities[0].properties[0]);

  /// See [Task.title].
  static final title =
      obx.QueryStringProperty<Task>(_entities[0].properties[1]);

  /// See [Task.description].
  static final description =
      obx.QueryStringProperty<Task>(_entities[0].properties[2]);

  /// See [Task.completed].
  static final completed =
      obx.QueryBooleanProperty<Task>(_entities[0].properties[3]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[1].properties[0]);

  /// See [User.email].
  static final email =
      obx.QueryStringProperty<User>(_entities[1].properties[1]);

  /// See [User.password].
  static final password =
      obx.QueryStringProperty<User>(_entities[1].properties[2]);

  /// See [User.userType].
  static final userType =
      obx.QueryStringProperty<User>(_entities[1].properties[3]);

  /// See [User.name].
  static final name = obx.QueryStringProperty<User>(_entities[1].properties[4]);
}

/// [Location] entity fields to define ObjectBox queries.
class Location_ {
  /// See [Location.id].
  static final id =
      obx.QueryIntegerProperty<Location>(_entities[2].properties[0]);

  /// See [Location.name].
  static final name =
      obx.QueryStringProperty<Location>(_entities[2].properties[1]);

  /// See [Location.address].
  static final address =
      obx.QueryStringProperty<Location>(_entities[2].properties[2]);

  /// See [Location.latitude].
  static final latitude =
      obx.QueryDoubleProperty<Location>(_entities[2].properties[3]);

  /// See [Location.longitude].
  static final longitude =
      obx.QueryDoubleProperty<Location>(_entities[2].properties[4]);

  /// See [Location.area].
  static final area =
      obx.QueryDoubleProperty<Location>(_entities[2].properties[5]);

  /// See [Location.areaUnit].
  static final areaUnit =
      obx.QueryStringProperty<Location>(_entities[2].properties[6]);

  /// See [Location.product].
  static final product =
      obx.QueryRelationToOne<Location, Product>(_entities[2].properties[7]);

  /// See [Location.farmer].
  static final farmer =
      obx.QueryRelationToOne<Location, User>(_entities[2].properties[8]);

  /// See [Location.soilType].
  static final soilType =
      obx.QueryStringProperty<Location>(_entities[2].properties[9]);

  /// See [Location.irrigationSource].
  static final irrigationSource =
      obx.QueryStringProperty<Location>(_entities[2].properties[10]);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// See [Product.id].
  static final id =
      obx.QueryIntegerProperty<Product>(_entities[3].properties[0]);

  /// See [Product.name].
  static final name =
      obx.QueryStringProperty<Product>(_entities[3].properties[1]);

  /// See [Product.description].
  static final description =
      obx.QueryStringProperty<Product>(_entities[3].properties[2]);

  /// See [Product.price].
  static final price =
      obx.QueryDoubleProperty<Product>(_entities[3].properties[3]);

  /// See [Product.unit].
  static final unit =
      obx.QueryStringProperty<Product>(_entities[3].properties[4]);

  /// See [Product.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<Product>(_entities[3].properties[5]);

  /// See [Product.searchName].
  static final searchName =
      obx.QueryStringProperty<Product>(_entities[3].properties[6]);
}

/// [ProductInventory] entity fields to define ObjectBox queries.
class ProductInventory_ {
  /// See [ProductInventory.id].
  static final id =
      obx.QueryIntegerProperty<ProductInventory>(_entities[4].properties[0]);

  /// See [ProductInventory.quantity].
  static final quantity =
      obx.QueryDoubleProperty<ProductInventory>(_entities[4].properties[1]);

  /// See [ProductInventory.unit].
  static final unit =
      obx.QueryStringProperty<ProductInventory>(_entities[4].properties[2]);

  /// See [ProductInventory.lastUpdated].
  static final lastUpdated =
      obx.QueryIntegerProperty<ProductInventory>(_entities[4].properties[3]);

  /// See [ProductInventory.product].
  static final product = obx.QueryRelationToOne<ProductInventory, Product>(
      _entities[4].properties[4]);

  /// See [ProductInventory.owner].
  static final owner = obx.QueryRelationToOne<ProductInventory, User>(
      _entities[4].properties[5]);

  /// See [ProductInventory.updateDate].
  static final updateDate =
      obx.QueryDateProperty<ProductInventory>(_entities[4].properties[6]);
}

/// [Transaction] entity fields to define ObjectBox queries.
class Transaction_ {
  /// See [Transaction.id].
  static final id =
      obx.QueryIntegerProperty<Transaction>(_entities[5].properties[0]);

  /// See [Transaction.timestamp].
  static final timestamp =
      obx.QueryIntegerProperty<Transaction>(_entities[5].properties[1]);

  /// See [Transaction.transactionType].
  static final transactionType =
      obx.QueryStringProperty<Transaction>(_entities[5].properties[2]);

  /// See [Transaction.quantity].
  static final quantity =
      obx.QueryDoubleProperty<Transaction>(_entities[5].properties[3]);

  /// See [Transaction.unit].
  static final unit =
      obx.QueryStringProperty<Transaction>(_entities[5].properties[4]);

  /// See [Transaction.totalAmount].
  static final totalAmount =
      obx.QueryDoubleProperty<Transaction>(_entities[5].properties[5]);

  /// See [Transaction.status].
  static final status =
      obx.QueryStringProperty<Transaction>(_entities[5].properties[6]);

  /// See [Transaction.user].
  static final user =
      obx.QueryRelationToOne<Transaction, User>(_entities[5].properties[7]);

  /// See [Transaction.product].
  static final product =
      obx.QueryRelationToOne<Transaction, Product>(_entities[5].properties[8]);

  /// See [Transaction.date].
  static final date =
      obx.QueryDateProperty<Transaction>(_entities[5].properties[9]);
}

/// [MSP] entity fields to define ObjectBox queries.
class MSP_ {
  /// See [MSP.id].
  static final id = obx.QueryIntegerProperty<MSP>(_entities[6].properties[0]);

  /// See [MSP.cropName].
  static final cropName =
      obx.QueryStringProperty<MSP>(_entities[6].properties[1]);

  /// See [MSP.price].
  static final price = obx.QueryDoubleProperty<MSP>(_entities[6].properties[2]);

  /// See [MSP.unit].
  static final unit = obx.QueryStringProperty<MSP>(_entities[6].properties[3]);

  /// See [MSP.lastUpdated].
  static final lastUpdated =
      obx.QueryIntegerProperty<MSP>(_entities[6].properties[4]);

  /// See [MSP.updateDate].
  static final updateDate =
      obx.QueryDateProperty<MSP>(_entities[6].properties[5]);
}
